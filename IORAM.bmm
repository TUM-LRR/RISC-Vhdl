----------------------------------------------------------------------------------
-- Company: 
-- Engineer: 
-- 
-- Create Date:    11:02:21 09/08/2016 
-- Design Name: 
-- Module Name:    BLOCKRAM - Behavioral 
-- Project Name: 
-- Target Devices: 
-- Tool versions: 
-- Description: 
--
-- Dependencies: 
--
-- Revision: 
-- Revision 0.01 - File Created
-- Additional Comments: 
--
----------------------------------------------------------------------------------
library IEEE;
use IEEE.STD_LOGIC_1164.ALL;
use ieee.numeric_std.all;

-- Uncomment the following library declaration if using
-- arithmetic functions with Signed or Unsigned values
--use IEEE.NUMERIC_STD.ALL;

-- Uncomment the following library declaration if instantiating
-- any Xilinx primitives in this code.
--library UNISIM;
--use UNISIM.VComponents.all;

entity BLOCKRAM is
port(
		clk : in std_logic;
		rst : in std_logic;
		addr_in : in std_logic_vector(10 downto 0); --11 bit for adressing 8-bit cells
		data_in : in std_logic_vector(7 downto 0);
		data_out: out std_logic_vector(7 downto 0);
		write_enable : in std_logic
);

end BLOCKRAM;

architecture Behavioral of BLOCKRAM is

	type mem_t is array (0 to 2047) of std_logic_vector(7 downto 0);  -- 2048 cells with 8 bit
	signal cells : mem_t:= (
	--jal x0, start
"01101111","00000000","10000000","00001100",

--dw 0x33323130
"00110000","00110001","00110010","00110011",

--dw 0x37363534
"00110100","00110101","00110110","00110111",

--dw 0x42413938
"00111000","00111001","01000001","01000010",

--dw 0x46454443
"01000011","01000100","01000101","01000110",

--addi x7, x0, 0x020
"10010011","00000011","00000000","00000010",

--addi x8, x0, 4
"00010011","00000100","01000000","00000000",

--addi x7, x7, 0xFFC
"10010011","10000011","11000011","11111111",

--add x9, x0, x10
"10110011","00000100","10100000","00000000",

--srl x9, x9, x7
"10110011","11010100","01110100","00000000",

--andi x9, x9, 0x00F
"10010011","11110100","11110100","00000000",

--add x9, x9, x8
"10110011","10000100","10000100","00000000",

--lb x9, x9, 0x000
"10000011","10000100","00000100","00000000",

--sb x2, x9, 0x000
"00100011","00000000","10010001","00000000",

--addi x2, x2, 0x001
"00010011","00000001","00010001","00000000",

--blt x0, x7, dword_to_hexstring1
"11100011","01000000","01110000","11111110",

--sb x2, x0, 0x000
"00100011","00000000","00000001","00000000",

--addi x2, x2, 0x001
"00010011","00000001","00010001","00000000",

--jalr x0, x1, 0x000
"01100111","10000000","00000000","00000000",

--add x8, x10, x0
"00110011","00000100","00000101","00000000",

--jal x0, print_string2
"01101111","00000000","00000000","00000001",

--sb x2, x7, 0x000
"00100011","00000000","01110001","00000000",

--addi x2, x2, 0x001
"00010011","00000001","00010001","00000000",

--addi x8, x8, 0x001
"00010011","00000100","00010100","00000000",

--lb x7, x8, 0x000
"10000011","00000011","00000100","00000000",

--bne x7, x0, print_string1
"11100011","10011000","00000011","11111110",

--jalr x0, x1, 0x000
"01100111","10000000","00000000","00000000",

--add x6, x0, x1
"00110011","00000011","00010000","00000000",

--beq x4, x5, test_op1
"01100011","00000110","01010010","00000000",

--addi x1, x0, 0x02D
"10010011","00000000","11010000","00000010",

--jal x0, test_op2
"01101111","00000000","10000000","00000000",

--addi x1, x0, 0x02B
"10010011","00000000","10110000","00000010",

--sb x2, x1, 0x000
"00100011","00000000","00010001","00000000",

--addi x2, x2, 0x001
"00010011","00000001","00010001","00000000",

--add x10, x0, x3
"00110011","00000101","00110000","00000000",

--jal x1, print_string
"11101111","11110000","00011111","11111100",

--addi x1, x0, 0x020
"10010011","00000000","00000000","00000010",

--sb x2, x1, 0x000
"00100011","00000000","00010001","00000000",

--addi x2, x2, 0x001
"00010011","00000001","00010001","00000000",

--beq x4, x5, test_op3
"01100011","00001010","01010010","00000000",

--add x10, x0, x4
"00110011","00000101","01000000","00000000",

--jal x1, dword_to_hexstring
"11101111","11110000","00011111","11110111",

--add x10, x0, x5
"00110011","00000101","01010000","00000000",

--jal x1, dword_to_hexstring
"11101111","11110000","10011111","11110110",

--jalr x0, x6, 0x000
"01100111","00000000","00000011","00000000",

--srli x2, x2, 0x6
"00010011","01010001","01100001","00000000",

--addi x2, x2, 0x001
"00010011","00000001","00010001","00000000",

--slli x2, x2, 0x6
"00010011","00010001","01100001","00000000",

--jalr x0, x1, 0x000
"01100111","10000000","00000000","00000000",

--dw 0x00444441
"01000001","01000100","01000100","00000000",

--lui x2, 0x20000
"00110111","00000001","00000000","00100000",

--addi x3, x0, 196
"10010011","00000001","01000000","00001100",

--lui x4, 0x7a1df
"00110111","11110010","00011101","01111010",

--addi x4, x4, 0x381
"00010011","00000010","00010010","00111000",

--lui x31, 0x048CF
"10110111","11111111","10001100","00000100",

--addi x31, x31, 0x2D8
"10010011","10001111","10001111","00101101",

--lui x5, 0x75810
"10110111","00000010","10000001","01110101",

--addi x5, x5, 0x0A9
"10010011","10000010","10010010","00001010",

--add x5, x5, x31
"10110011","10000010","11110010","00000001",

--jal x1, test_op
"11101111","11110000","00011111","11111000",

others=>(others=>'0')


 
	);
	
	attribute ram_style: string;
	attribute ram_style of cells : signal is "block";
	
begin
	

	process(clk) begin
	
		
		
		if rising_edge(clk) then
		
			if rst = '0' then
			--No reset -> standard dual-port usage
				if write_enable = '1'then
					cells(to_integer(unsigned(addr_in))) <= data_in;
				end if;
				data_out <= cells(to_integer(unsigned(addr_in)));
			
			end if;
			
			
			
			
		end if;
			
	end process;

end Behavioral;
